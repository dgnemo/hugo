common/paths/url_test.go:119:func TestUgly(t *testing.T) {

hugolib/page_test.go:1353:		for _, uglyURLs := range []bool{false, true} {
hugolib/page_test.go:1355:			uglyURLs := uglyURLs
hugolib/page_test.go:1356:			t.Run(fmt.Sprintf("disablePathToLower=%t,uglyURLs=%t", disablePathToLower, uglyURLs), func(t *testing.T) {
hugolib/page_test.go:1366:				cfg.Set("uglyURLs", uglyURLs)
hugolib/page_test.go:1399:					if uglyURLs {
hugolib/page_test.go:1415:				if uglyURLs {
hugolib/page_test.go:1428:				if uglyURLs {

hugolib/taxonomy_test.go:65:	for _, uglyURLs := range []bool{false, true} {
hugolib/taxonomy_test.go:66:		uglyURLs := uglyURLs
hugolib/taxonomy_test.go:67:		t.Run(fmt.Sprintf("uglyURLs=%t", uglyURLs), func(t *testing.T) {
hugolib/taxonomy_test.go:69:			doTestTaxonomiesWithAndWithoutContentFile(t, uglyURLs)
hugolib/taxonomy_test.go:74:func doTestTaxonomiesWithAndWithoutContentFile(t *testing.T, uglyURLs bool) {
hugolib/taxonomy_test.go:77:uglyURLs = %t
hugolib/taxonomy_test.go:104:	siteConfig = fmt.Sprintf(siteConfig, uglyURLs)
hugolib/taxonomy_test.go:128:		if uglyURLs {
hugolib/taxonomy_test.go:179:	if uglyURLs {
hugolib/taxonomy_test.go:189:	if uglyURLs {

hugolib/pages_language_merge_test.go:81:	// This looks less ugly in the templates ...
hugolib/pagecollections_test.go:346:uglyurls: true

hugolib/pagebundler_test.go:50:			for _, ugly := range []bool{false, true} {
hugolib/pagebundler_test.go:55:				ugly := ugly
hugolib/pagebundler_test.go:57:				c.Run(fmt.Sprintf("ugly=%t,canonify=%t,path=%s", ugly, canonify, baseURLPathId),
hugolib/pagebundler_test.go:91:						cfg.Set("uglyURLs", ugly)
hugolib/pagebundler_test.go:112:							if ugly {
hugolib/pagebundler_test.go:117:							if !ugly {
hugolib/pagebundler_test.go:161:						if !ugly {
hugolib/pagebundler_test.go:204:						if ugly {
hugolib/pagebundler_test.go:230:						if ugly {
hugolib/pagebundler_test.go:273:	for _, ugly := range []bool{false, true} {
hugolib/pagebundler_test.go:274:		ugly := ugly
hugolib/pagebundler_test.go:275:		t.Run(fmt.Sprintf("ugly=%t", ugly),
hugolib/pagebundler_test.go:280:				cfg.Set("uglyURLs", ugly)
hugolib/site_url_test.go:73:	cfg.Set("uglyURLs", false)
hugolib/site_url_test.go:96:func TestUglyURLsPerSection(t *testing.T) {
hugolib/site_url_test.go:113:	cfg.Set("uglyURLs", map[string]bool{
hugolib/site_url_test.go:124:	notUgly := s.getPage(page.KindPage, "sect1/p1.md")
hugolib/site_url_test.go:125:	c.Assert(notUgly, qt.Not(qt.IsNil))
hugolib/site_url_test.go:126:	c.Assert(notUgly.Section(), qt.Equals, "sect1")
hugolib/site_url_test.go:127:	c.Assert(notUgly.RelPermalink(), qt.Equals, "/sect1/p1/")
hugolib/site_url_test.go:129:	ugly := s.getPage(page.KindPage, "sect2/p2.md")
hugolib/site_url_test.go:130:	c.Assert(ugly, qt.Not(qt.IsNil))
hugolib/site_url_test.go:131:	c.Assert(ugly.Section(), qt.Equals, "sect2")
hugolib/site_url_test.go:132:	c.Assert(ugly.RelPermalink(), qt.Equals, "/sect2/p2.html")
hugolib/shortcode_test.go:619:	cfg.Set("uglyURLs", false)

hugolib/alias_test.go:60:		{".html", "", ".html", map[string]interface{}{"uglyURLs": true}},
hugolib/page__paths.go:131:		UglyURLs:    s.Info.uglyURLs(p),

hugolib/page_permalink_test.go:35:		uglyURLs     bool
hugolib/page_permalink_test.go:72:			cfg.Set("uglyURLs", test.uglyURLs)
resources/page/page_paths_test.go:42:			for _, uglyURLs := range []bool{false, true} {
resources/page/page_paths_test.go:196:					t.Run(fmt.Sprintf("langPrefixPath=%s,langPrefixLink=%s,uglyURLs=%t,name=%s", langPrefixPath, langPrefixLink, uglyURLs, test.name),
resources/page/page_paths_test.go:200:							test.d.UglyURLs = uglyURLs
resources/page/page_paths_test.go:204:							isUgly := uglyURLs && !test.d.Type.NoUgly
resources/page/page_paths_test.go:211:							} else if test.d.Type.MediaType.FirstSuffix.Suffix != "" && (!strings.HasPrefix(expected.TargetFilename, "/index") || test.d.Addends != "") && test.d.URL == "" && isUgly {
resources/page/pagination_test.go:202:	for _, uglyURLs := range []bool{false, true} {
resources/page/pagination_test.go:203:		c.Run(fmt.Sprintf("uglyURLs=%t", uglyURLs), func(c *qt.C) {
resources/page/pagination_test.go:210:				expectedUgly string
resources/page/pagination_test.go:227:				cfg.Set("uglyURLs", uglyURLs)
resources/page/pagination_test.go:228:				d.UglyURLs = uglyURLs
resources/page/pagination_test.go:237:				if uglyURLs {
resources/page/pagination_test.go:238:					c.Assert(got, qt.Equals, test.expectedUgly)
